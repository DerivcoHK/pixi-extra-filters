{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/filters/bulgepinch/BulgePinchFilter.js","src/filters/colorreplace/ColorReplaceFilter.js","src/filters/glow/GlowFilter.js","src/filters/outline/OutlineFilter.js","src/filters/simplelightmap/SimpleLightmapFilter.js","src/index"],"names":[],"mappingspHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pixi-extra-filters.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n* @author Julien CLEREL @JuloxRox\n* original filter https://github.com/evanw/glfx.js/blob/master/src/filters/warp/bulgepinch.js by Evan Wallace : http://madebyevan.com/\n*/\n\n/**\n* @filter Bulge / Pinch\n* @description Bulges or pinches the image in a circle.\n* @param center The x and y coordinates of the center of the circle of effect.\n* @param radius The radius of the circle of effect.\n* @param strength -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n*\n* @class BulgePinchFilter\n* @extends AbstractFilter\n* @constructor\n*/\n\nfunction BulgePinchFilter() {\n    PIXI.AbstractFilter.call(this,\n        // vertex shader\n        null,\n        // fragment shader\n        [\n            'precision mediump float;',\n            'uniform float radius;',\n            'uniform float strength;',\n            'uniform vec2 center;',\n            'uniform sampler2D uSampler;',\n            'uniform vec4 dimensions;',\n            'varying vec2 vTextureCoord;',\n\n            'void main()',\n            '{',\n                'vec2 coord = vTextureCoord * dimensions.xy;',\n                'coord -= center;',\n                'float distance = length(coord);',\n                'if (distance < radius) {',\n                    'float percent = distance / radius;',\n                    'if (strength > 0.0) {',\n                        'coord *= mix(1.0, smoothstep(0.0, radius /     distance, percent), strength * 0.75);',\n                    '} else {',\n                        'coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);',\n                    '}',\n                '}',\n                'coord += center;',\n                'gl_FragColor = texture2D(uSampler, coord / dimensions.xy);',\n                'vec2 clampedCoord = clamp(coord, vec2(0.0), dimensions.xy);',\n                'if (coord != clampedCoord) {',\n                    'gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));',\n                '}',\n            '}'\n        ].join('\\n'),\n        // custom uniforms\n        {\n            dimensions: { type: '4f', value: [0,0,0,0] },\n            radius: { type: '1f', value: 100 },\n            strength: { type: '1f', value: 0.5 },\n            center: { type: 'v2', value: {x: 150, y: 150} }\n        }\n    );\n};\n\nBulgePinchFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\nBulgePinchFilter.prototype.constructor = BulgePinchFilter;\nmodule.exports = BulgePinchFilter;\n\nObject.defineProperties(BulgePinchFilter.prototype, {\n    /**\n     * The radius of the circle of effect.\n     *\n     * @property radius\n     * @type Number\n     */\n    radius: {\n        get: function ()\n        {\n            return this.uniforms.radius.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.radius.value = value;\n        }\n    },\n    /**\n     * The strength of the effect. -1 to 1 (-1 is strong pinch, 0 is no effect, 1 is strong bulge)\n     *\n     * @property strength\n     * @type Number\n     */\n    strength: {\n        get: function ()\n        {\n            return this.uniforms.strength.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.strength.value = value;\n        }\n    },\n    /**\n     * The x and y coordinates of the center of the circle of effect.\n     *\n     * @property center\n     * @type Point\n     */\n    center: {\n        get: function ()\n        {\n            return this.uniforms.center.value;\n        },\n        set: function (value)\n        {\n            this.uniforms.center.value = value;\n        }\n    }\n});\n","/**\n * ColoreReplaceFilter, originally by mishaa, updated by timetocode\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\n *\n * @class\n * @param originalColor {FloatArray32} The color that will be changed, as a 3 component RGB e.g. new Float32Array(1.0, 1.0, 1.0)\n * @param newColor {FloatArray32} The resulting color, as a 3 component RGB e.g. new Float32Array(1.0, 0.5, 1.0)\n * @param epsilon {float} Tolerance/sensitivity of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n *\n * @example\n *  // replaces true red with true blue\n *  someSprite.shader = new ColorReplaceFilter(\n *   new Float32Array([1, 0, 0]),\n *   new Float32Array([0, 0, 1]),\n *   0.001\n *  );\n *  // replaces the RGB color 220, 220, 220 with the RGB color 225, 200, 215\n *  someOtherSprite.shader = new ColorReplaceFilter(\n *   new Float32Array([220/255.0, 220/255.0, 220/255.0]),\n *   new Float32Array([225/255.0, 200/255.0, 215/255.0]),\n *   0.001\n *  );\n *\n */\nfunction ColorReplaceFilter(originalColor, newColor, epsilon) {\n  PIXI.AbstractFilter.call(this,\n    // vertex shader\n    null,\n    // fragment shader\n    [\n      'precision mediump float;',\n      'varying vec2 vTextureCoord;',\n      'uniform sampler2D texture;',\n      'uniform vec3 originalColor;',\n      'uniform vec3 newColor;',\n      'uniform float epsilon;',\n      'void main(void) {',\n      '  vec4 currentColor = texture2D(texture, vTextureCoord);',\n      '  vec3 colorDiff = originalColor - (currentColor.rgb / max(currentColor.a, 0.0000000001));',\n      '  float colorDistance = length(colorDiff);',\n      '  float doReplace = step(colorDistance, epsilon);',\n      '  gl_FragColor = vec4(mix(currentColor.rgb, (newColor + colorDiff) * currentColor.a, doReplace), currentColor.a);',\n      '}'\n    ].join('\\n'),\n    // custom unifroms\n    {\n      originalColor: { type: '3f', value: originalColor },\n      newColor: { type: '3f', value: newColor },\n      epsilon: { type: '1f', value: epsilon }\n    }\n  );\n};\n\nColorReplaceFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\nColorReplaceFilter.prototype.constructor = ColorReplaceFilter;\nmodule.exports = ColorReplaceFilter;\n\nObject.defineProperty(ColorReplaceFilter.prototype, 'originalColor', {\n  set: function (value) {\n    var r = ((value & 0xFF0000) >> 16) / 255,\n        g = ((value & 0x00FF00) >> 8) / 255,\n        b = (value & 0x0000FF) / 255;\n    this.uniforms.originalColor.value = { x: r, y: g, z: b };\n    this.dirty = true;\n  }\n});\n\nObject.defineProperty(ColorReplaceFilter.prototype, 'newColor', {\n  set: function (value) {\n    var r = ((value & 0xFF0000) >> 16) / 255,\n        g = ((value & 0x00FF00) >> 8) / 255,\n        b = (value & 0x0000FF) / 255;\n    this.uniforms.newColor.value = { x: r, y: g, z: b };\n    this.dirty = true;\n  }\n});\n\nObject.defineProperty(ColorReplaceFilter.prototype, 'epsilon', {\n  set: function (value) {\n    this.uniforms.epsilon.value = value;\n    this.dirty = true;\n  }\n});","/**\r\n * GlowFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/12756-glow-filter/?hl=mishaa#entry73578\r\n * http://codepen.io/mishaa/pen/raKzrm\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param outerStrength {number} The strength of the glow outward from the edge of the sprite.\r\n * @param innerStrength {number} The strength of the glow inward from the edge of the sprite.\r\n * @param color {number} The color of the glow.\r\n * @param quality {number} A number between 0 and 1 that describes the quality of the glow.\r\n *\r\n * @example\r\n *  someSprite.filters = [\r\n *      new GlowFilter(renderer.width, renderer.height, 15, 2, 1, 0xFF0000, 0.5)\r\n *  ];\r\n */\r\nfunction GlowFilter(viewWidth, viewHeight, distance, outerStrength, innerStrength, color, quality) {\r\n    PIXI.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'varying vec4 vColor;',\r\n\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float distance;',\r\n            'uniform float outerStrength;',\r\n            'uniform float innerStrength;',\r\n            'uniform vec4 glowColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float totalAlpha = 0.0;',\r\n            '    float maxTotalAlpha = 0.0;',\r\n            '    float cosAngle;',\r\n            '    float sinAngle;',\r\n            '    for (float angle = 0.0; angle <= PI * 2.0; angle += ' + (1 / quality / distance).toFixed(7) + ') {',\r\n            '       cosAngle = cos(angle);',\r\n            '       sinAngle = sin(angle);',\r\n            '       for (float curDistance = 1.0; curDistance <= ' + distance.toFixed(7) + '; curDistance++) {',\r\n            '           curColor = texture2D(uSampler, vec2(vTextureCoord.x + cosAngle * curDistance * px.x, vTextureCoord.y + sinAngle * curDistance * px.y));',\r\n            '           totalAlpha += (distance - curDistance) * curColor.a;',\r\n            '           maxTotalAlpha += (distance - curDistance);',\r\n            '       }',\r\n            '    }',\r\n            '    maxTotalAlpha = max(maxTotalAlpha, 0.0001);',\r\n\r\n            '    ownColor.a = max(ownColor.a, 0.0001);',\r\n            '    ownColor.rgb = ownColor.rgb / ownColor.a;',\r\n            '    float outerGlowAlpha = (totalAlpha / maxTotalAlpha)  * outerStrength * (1. - ownColor.a);',\r\n            '    float innerGlowAlpha = ((maxTotalAlpha - totalAlpha) / maxTotalAlpha) * innerStrength * ownColor.a;',\r\n            '    float resultAlpha = (ownColor.a + outerGlowAlpha);',\r\n\r\n            '    gl_FragColor = vec4(mix(mix(ownColor.rgb, glowColor.rgb, innerGlowAlpha / ownColor.a), glowColor.rgb, outerGlowAlpha / resultAlpha) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            distance: { type: '1f', value: distance },\r\n            outerStrength: { type: '1f', value: 0 },\r\n            innerStrength: { type: '1f', value: 0 },\r\n            glowColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: 0 },\r\n            pixelHeight: { type: '1f', value: 0 }\r\n        }\r\n    );\r\n\r\n    quality = Math.pow(quality, 1/3);\r\n    this.quality = quality;\r\n\r\n    this.uniforms.distance.value *= quality;\r\n\r\n    viewWidth *= quality;\r\n    viewHeight *= quality;\r\n\r\n    this.color = color;\r\n    this.outerStrength = outerStrength;\r\n    this.innerStrength = innerStrength;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nGlowFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nGlowFilter.prototype.constructor = GlowFilter;\r\nmodule.exports = GlowFilter;\r\n\r\nObject.defineProperties(GlowFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.glowColor.value);\r\n        },\r\n        set: function(value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.glowColor.value);\r\n        }\r\n    },\r\n\r\n    outerStrength: {\r\n        get: function () {\r\n            return this.uniforms.outerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.outerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    innerStrength: {\r\n        get: function () {\r\n            return this.uniforms.innerStrength.value;\r\n        },\r\n        set: function (value) {\r\n            this.uniforms.innerStrength.value = value;\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n","/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB\r\n *\r\n * @class\r\n * @param viewWidth {number} The width of the view to draw to, usually renderer.width.\r\n * @param viewHeight {number} The height of the view to draw to, usually renderer.height.\r\n * @param thickness {number} The tickness of the outline.\r\n * @param color {number} The color of the glow.\r\n *\r\n * @example\r\n *  someSprite.shader = new OutlineFilter(renderer.width, renderer.height, 9, 0xFF0000);\r\n */\r\nfunction OutlineFilter(viewWidth, viewHeight, thickness, color) {\r\n    PIXI.AbstractFilter.call(this,\r\n        // vertex shader\r\n        null,\r\n        // fragment shader\r\n        [\r\n            'precision mediump float;',\r\n\r\n            'varying vec2 vTextureCoord;',\r\n            'uniform sampler2D uSampler;',\r\n\r\n            'uniform float thickness;',\r\n            'uniform vec4 outlineColor;',\r\n            'uniform float pixelWidth;',\r\n            'uniform float pixelHeight;',\r\n            'vec2 px = vec2(pixelWidth, pixelHeight);',\r\n\r\n            'void main(void) {',\r\n            '    const float PI = 3.14159265358979323846264;',\r\n            '    vec4 ownColor = texture2D(uSampler, vTextureCoord);',\r\n            '    vec4 curColor;',\r\n            '    float maxAlpha = 0.;',\r\n            '    for (float angle = 0.; angle < PI * 2.; angle += ' + (1 / thickness).toFixed(7) + ') {',\r\n            '        curColor = texture2D(uSampler, vec2(vTextureCoord.x + thickness * px.x * cos(angle), vTextureCoord.y + thickness * px.y * sin(angle)));',\r\n            '        maxAlpha = max(maxAlpha, curColor.a);',\r\n            '    }',\r\n            '    float resultAlpha = max(maxAlpha, ownColor.a);',\r\n            '    gl_FragColor = vec4((ownColor.rgb + outlineColor.rgb * (1. - ownColor.a)) * resultAlpha, resultAlpha);',\r\n            '}'\r\n        ].join('\\n'),\r\n        // custom uniforms\r\n        {\r\n            thickness: { type: '1f', value: thickness },\r\n            outlineColor: { type: '4f', value: new Float32Array([0, 0, 0, 1]) },\r\n            pixelWidth: { type: '1f', value: null },\r\n            pixelHeight: { type: '1f', value: null },\r\n        }\r\n    );\r\n\r\n    this.color = color;\r\n    this.viewWidth = viewWidth;\r\n    this.viewHeight = viewHeight;\r\n};\r\n\r\nOutlineFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\r\nOutlineFilter.prototype.constructor = OutlineFilter;\r\nmodule.exports = OutlineFilter;\r\n\r\nObject.defineProperties(OutlineFilter.prototype, {\r\n    color: {\r\n        get: function () {\r\n            return PIXI.utils.rgb2hex(this.uniforms.outlineColor.value);\r\n        },\r\n        set: function (value) {\r\n            PIXI.utils.hex2rgb(value, this.uniforms.outlineColor.value);\r\n        }\r\n    },\r\n\r\n    viewWidth: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelWidth.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelWidth.value = 1 / value;\r\n        }\r\n    },\r\n\r\n    viewHeight: {\r\n        get: function () {\r\n            return 1 / this.uniforms.pixelHeight.value;\r\n        },\r\n        set: function(value) {\r\n            this.uniforms.pixelHeight.value = 1 / value;\r\n        }\r\n    }\r\n});\r\n","/**\n* SimpleLightmap, originally by Oza94\n* http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/\n* http://codepen.io/Oza94/pen/EPoRxj\n*\n* @class\n* @param lightmapTexture {PIXI.Texture} a texture where your lightmap is rendered\n* @param ambientColor {Array} An RGBA array of the ambient color\n* @param [resolution] {Array} An array for X/Y resolution\n*\n* @example\n*  var lightmapTex = new PIXI.RenderTexture(renderer, 400, 300);\n*\n*  // ... render lightmap on lightmapTex\n*\n*  stageContainer.filters = [\n*    new SimpleLightmapFilter(lightmapTex, [0.3, 0.3, 0.7, 0.5], [1.0, 1.0])\n*  ];\n*/\nfunction SimpleLightmapFilter(lightmapTexture, ambientColor, resolution) {\n    PIXI.AbstractFilter.call(\n        this,\n        null,\n        [\n            'precision mediump float;',\n            'varying vec4 vColor;',\n            'varying vec2 vTextureCoord;',\n            'uniform sampler2D u_texture; //diffuse map',\n            'uniform sampler2D u_lightmap;   //light map',\n            'uniform vec2 resolution; //resolution of screen',\n            'uniform vec4 ambientColor; //ambient RGB, alpha channel is intensity ',\n            'void main() {',\n            '    vec4 diffuseColor = texture2D(u_texture, vTextureCoord);',\n            '    vec2 lighCoord = (gl_FragCoord.xy / resolution.xy);',\n            '    vec4 light = texture2D(u_lightmap, vTextureCoord);',\n            '    vec3 ambient = ambientColor.rgb * ambientColor.a;',\n            '    vec3 intensity = ambient + light.rgb;',\n            '    vec3 finalColor = diffuseColor.rgb * intensity;',\n            '    gl_FragColor = vColor * vec4(finalColor, diffuseColor.a);',\n            '}'\n        ].join('\\n'),\n        {\n            u_lightmap: {\n                type: 'sampler2D',\n                value: lightmapTexture\n            },\n            resolution: {\n                type: '2f',\n                value: new Float32Array(resolution || [1.0, 1.0])\n            },\n            ambientColor: {\n                type: '4f',\n                value: new Float32Array(ambientColor)\n            }\n        });\n}\n\nSimpleLightmapFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);\nSimpleLightmapFilter.prototype.constructor = SimpleLightmapFilter;\n\nObject.defineProperties(SimpleLightmapFilter.prototype, {\n    texture: {\n        get: function () {\n            return this.uniforms.u_lightmap.value;\n        },\n        set: function (value) {\n            this.uniforms.u_lightmap.value = value;\n        }\n    },\n    color: {\n        get: function () {\n            return this.uniforms.ambientColor.value;\n        },\n        set: function (value) {\n            this.uniforms.ambientColor.value = new Float32Array(value);\n        }\n    },\n    resolution: {\n        get: function () {\n            return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n            this.uniforms.resolution.value = new Float32Array(value);\n        }\n    }\n});\n\nmodule.exports = SimpleLightmapFilter;\n","module.exports = {\r\n    GlowFilter: require('./filters/glow/GlowFilter'),\r\n    OutlineFilter: require('./filters/outline/OutlineFilter'),\r\n    BulgePinchFilter: require('./filters/bulgepinch/BulgePinchFilter'),\r\n    ColorReplaceFilter: require('./filters/colorreplace/ColorReplaceFilter'),\r\n    SimpleLightmapFilter:\r\n        require('./filters/simplelightmap/SimpleLightmapFilter')\r\n};\r\n\r\nfor (var filter in module.exports) {\r\n    PIXI.filters[filter] = module.exports[filter];\r\n}\r\n"]}